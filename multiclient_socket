/* SERVER */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <arpa/inet.h>
#include <time.h>
#include <thread>
#include <chrono>
void error(const char* msg){
    perror(msg);
    exit(1);
}

int main (){
    printf("this is server\n");
    int opt = 1;
    // sockfd chuyên để listen, còn newsockfd là chuyển để connect đến 1 client, nhiều client thì cần nhiều newsockfd
    int sockfd, n;

    // ser_addr là đại chỉ của bản thân server, cli_addr là ở chỗ accept(), hoặc dùng của thằng ser_addr cũng được
    struct sockaddr_in ser_addr, cli_addr;
    socklen_t cli = sizeof (cli_addr);
    socklen_t ser = sizeof(ser_addr);
    char buffer[255];
    time_t ticks;

    memset(buffer, 0, 255);
    memset(&ser_addr, 0, sizeof(ser_addr));
    memset(&cli_addr, 0, sizeof(cli_addr));

    //create socket to lister
    if((sockfd = socket(AF_INET, SOCK_STREAM, 0)) <0){
        error("socket fail");
    }

    //cho phép nhiều máy chủ cùng liên kết với 1 port, và phải ngăn chặn việc thằng này cướp quyền điều khiển của thằng khác
    if (setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, (char*)&opt, sizeof(opt)) <0){
        error("setsockopt fail");
    }

    // set address for socket where listen
    ser_addr.sin_family = AF_INET;
    ser_addr.sin_addr.s_addr = inet_addr("192.168.220.129");
    ser_addr.sin_port = htons(9398); // htons chuyển đổi port sang thứ tự byte mạng

    // gắn cái địa chỉ đó vào cái socket thì mới được
    if(bind(sockfd, (struct sockaddr*)&ser_addr, ser) <0){
        error("bind fail");
    }
    if(listen(sockfd, 9) <0){
      error("listen fail");
    }

    // create 2 set of descriptors file, lưu tập socket
    fd_set currentSocket, readySocket;
    FD_ZERO(&currentSocket); // set null
    FD_SET(sockfd, &currentSocket); // thêm socket "sockfd" vào tập currentSocket

    /* cho thằng socket ban đầu vào tập socket, sau đó select dựa trên thằng mời nhất */
    int startCount = sockfd; // socket ban đầu

    while(1){
        // gán tập socket cho nhau
        readySocket = currentSocket;

        /*
         Select command allows to monitor multiple file descriptors, waiting until one of the file descriptors become active.
            For example, if there is some data to be read on one of the sockets select will provide that information.
            Select works like an interrupt handler, which gets activated as soon as any file descriptor sends any data.
         */


        printf("\nbefore select\n");
        if(select(startCount+1, &readySocket, nullptr, nullptr, nullptr) <0){
            error("select fail");
        }
        std::thread t([&](){

            // xét hoạt động trên từng này socket
            for(int i = 0; i<=startCount; i++){
                // hoạt động trên thằng nào: somethings happened on this socket
                if(FD_ISSET(i, &readySocket)){
                    // nếu trên thằng sockfd là thằng ban đầu để nghe, thì có nghĩa là có connect đến
                    if(i==sockfd){
                        int newsockfd;
                        printf("\nbefore accept\n");
                        if((newsockfd = accept(sockfd, (struct sockaddr*)&cli_addr, &cli)) < 0){
                            error("accept fail");
                        }
                        FD_SET(newsockfd, &currentSocket); // thêm socket này đến tập currentSocket
                        printf("New connection , socket fd is %d , ip is : %s , port : %d \n" , newsockfd , inet_ntoa(cli_addr.sin_addr) , ntohs
                              (cli_addr.sin_port));
                        if(newsockfd > startCount){
                            startCount = newsockfd; // khi mà socket tăng thì phải cho for xét tăng lên
                        }
                        while(1){
                            memset(buffer, 0, 255); // reset buffer

                            //read nos sex block code để đợi thằng write xong
                            if((n = read(newsockfd, buffer, 255)) < 0){
                                error("read fail");
                            }
                            printf("client: %s", buffer);
                            memset(buffer, 0, 255);
                            printf("serve: ");
                            fflush(stdin);
                            fgets(buffer, 255, stdin);

                            // ghi byte from buffer to i
                            if((n = write(newsockfd, buffer, strlen(buffer))) <0){
                                error("write fail");
                            }

                            int i = strncmp("bye", buffer, 3);
                            if(i==0){
                                break;
                            }
                            FD_CLR(newsockfd, &currentSocket);
                            fflush(stdin);
                        }
                    }
                    /* còn nếu k thì là trên 1 cái connect đã exits vì cứ 1 connect đến mình tạo 1 socket
                    mới rồi thêm  vào cái tập socket currentSocket*/
                    else{
                        while(1){
                            memset(buffer, 0, 255); // reset buffer

                            //read nos sex block code để đợi thằng write xong
                            if((n = read(i, buffer, 255)) < 0){
                                error("read fail");
                            }
                            printf("client: %s", buffer);
                            memset(buffer, 0, 255);
                            printf("serve: ");
                            fgets(buffer, 255, stdin);

                            // ghi byte from buffer to i
                            if((n = write(i, buffer, strlen(buffer))) <0){
                                error("write fail");
                            }

                            int i = strncmp("bye", buffer, 3);
                            if(i==0){
                                break;
                            }
                            FD_CLR(i, &currentSocket);
                            fflush(stdin);
                        }
                    }
                    close(i);
                }
            }
        });
        t.detach();
    }
    close(sockfd);
    FD_CLR(sockfd, &currentSocket);
    return 0;
}


/* CLIENT */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <arpa/inet.h>

void error(const char* msg){
    perror(msg);
    exit(1);
}
int main (){
    printf("this is client\n");
    int n; // for check read write
    int sockfd; // định danh
    struct sockaddr_in ser_addr; // description ip internet adress, gồm port, ip adress, address family
    char buffer[255];
    time_t ticks;

    // reset tất cả về null
    memset(&ser_addr, 0, sizeof (ser_addr));
    memset(buffer, 0, sizeof (buffer));

    //create ra 1 cái socket
    if((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0){
        error("socket fail");
    }

    // chuẩn cái port và ip address của server
    ser_addr.sin_family = AF_INET;
    ser_addr.sin_addr.s_addr = inet_addr("192.168.220.129"); // ifconfig in linux
    ser_addr.sin_port = htons(9398); // hardcode cái port, nhưng k nên, nên dùng hàm create ra 1 port trống

    socklen_t ser = sizeof(ser_addr);
    if(connect(sockfd, (struct sockaddr*)&ser_addr, ser) ==-1){
        error("connect fail");
    }

    while(1){
        //read đọc byte từ sockfd ra buffer, độ dài byte 255
        memset(buffer,0,255);
        printf("Client: ");
        fflush(stdin);
        fgets(buffer,255, stdin);

        if((n = write(sockfd, buffer, strlen(buffer))) <0){
            error("write fail");
        }
        memset(buffer,0,255);
        if((n = read(sockfd, buffer, 255)) < 0){
            error("read fail");
        }
        printf("serve: %s", buffer);
        int i = strncmp("bye", buffer, 3);
        if(i==0){
            break;
        }

        fflush(stdin);
    }

    close(sockfd);
    return 0;
}

